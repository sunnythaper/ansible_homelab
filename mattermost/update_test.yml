
---
- hosts: all
  vars:
    files_to_keep:
      - client/plugins/
      - config/config.json
      - data/
      - logs/
      - plugins/

    files_to_delete:
      - tmp/

  tasks:
    - name: Get currently installed Mattermost version
      shell: '/opt/mattermost/bin/mattermost version | grep -oP "(?<=^Version:\\s)([0-9].*)"'
      register: current_version
      changed_when: False

    - name: Getting latest Mattermost release JSON from Github
      uri:
        url: https://api.github.com/repos/mattermost/mattermost-server/releases/latest
        return_content: true
      register: release
      changed_when: current_version.stdout not in release.json.name

    - name: Downloading & unarchiving Mattermost tarball
      unarchive:
        src: "https://releases.mattermost.com/{{ release.json.name | replace('v','') }}/mattermost-{{ release.json.name | replace('v','') }}-linux-amd64.tar.gz"
        dest: /tmp/
        remote_src: yes
      when: release.changed

    - name: Create Mattermost upgrade folder
      copy:
        src: /tmp/mattermost/
        dest: /opt/mattermost-upgrade
        remote_src: yes
        directory_mode: yes
        mode: preserve
        group: mattermost
        owner: mattermost
      when: release.changed

    - name: Copy config, data, and plugin files to upgrade folder
      copy:
        src: /opt/mattermost/{{ item }}
        dest: /opt/mattermost-upgrade/{{ item }}
        remote_src: yes
        directory_mode: yes
        force: yes
        mode: preserve
        group: mattermost
        owner: mattermost
      with_items: "{{ files_to_keep }}"
      when: release.changed

    # - name: Stop service mattermost, if started
    #   service:
    #     name: mattermost
    #     state: stopped

    # - name: Creating a directory for database backups
    #   file:
    #     path: /opt/mattermost-backups/db
    #     mode: 0775
    #     owner: root
    #     state: directory

    # - name: Backing up Postgres database
    #   shell: "pg_dumpall --clean -U mattermost > /opt/mattermost-backups/db/{{ ansible_date_time.iso8601 }}.db"

    # - name: Creating a directory for application backups
    #   file:
    #     path: /opt/mattermost-backups/app
    #     mode: 0775
    #     owner: root
    #     state: directory

    # - name: Backing up Mattermost application
    #   copy:
    #     src: /opt/mattermost
    #     dest: /opt/mattermost-backups/app/{{ ansible_date_time.iso8601 }}
    #     remote_src: yes
    #     mode: preserve
    #     group: mattermost
    #     owner: mattermost

    # DELETE MATTERMOST DIRECTORY AND RENAME UPGRADE DIRECTORY

    # - name: Start service mattermost
    #   service:
    #     name: mattermost
    #     state: started

    - name: Delete unneeded files
      file:
        path: "/{{ item }}"
        state: absent
      with_items: "{{ files_to_delete }}"