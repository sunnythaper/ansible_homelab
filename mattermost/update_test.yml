
---
- hosts: all
  vars:
    files_to_keep:
      - config/config.json

    directories_to_keep:
      - client/plugins/
      - data/
      - logs/
      - plugins/

    directories_to_delete:
      - tmp/mattermost/

    backup_directories:
      - /opt/mattermost-backups/db
      - /opt/mattermost-backups/app

  tasks:
    - name: Get currently installed Mattermost version
      shell: '/opt/mattermost/bin/mattermost version | grep -oP "(?<=^Build Number:\\s)([0-9].*)"'
      register: current_version
      changed_when: False

    - name: Getting latest Mattermost release JSON from Github
      uri:
        url: https://api.github.com/repos/mattermost/mattermost-server/releases/latest
        return_content: true
      register: release
      changed_when: current_version.stdout not in release.json.name

    - name: Downloading & unarchiving Mattermost tarball
      unarchive:
        src: "https://releases.mattermost.com/{{ release.json.name | replace('v','') }}/mattermost-{{ release.json.name | replace('v','') }}-linux-amd64.tar.gz"
        dest: /tmp/
        remote_src: yes
      when: release.changed

    - name: Create folders for config, data, and plugins in upgrade folder
      file:
        path: /tmp/mattermost/{{ item }}
        mode: 0755
        group: mattermost
        owner: mattermost
        state: directory
      with_items: "{{ directories_to_keep }}"
      when: release.changed

    - name: Copy config, data, and plugins files to upgrade folder
      copy:
        src: /opt/mattermost/{{ item }}
        dest: /tmp/mattermost/{{ item }}
        remote_src: yes
        directory_mode: yes
        force: yes
        mode: preserve
        group: mattermost
        owner: mattermost
      with_items: 
        - "{{ files_to_keep }}"
        - "{{ directories_to_keep }}"
      when: release.changed

    - name: Create directories for application & database backups
      file:
        path: "{{ item }}"
        mode: 0755
        group: root
        owner: root
        state: directory
      with_items: "{{ backup_directories }}"

    - name: Stop service mattermost, if started
      service:
        name: mattermost
        state: stopped
      when: release.changed

    - name: Back up Postgres database
      shell: "pg_dumpall --clean -U mattermost > /opt/mattermost-backups/db/{{ ansible_date_time.iso8601 }}.db"
      when: release.changed

    - name: Back up Mattermost application
      copy:
        src: /opt/mattermost
        dest: /opt/mattermost-backups/app/{{ ansible_date_time.iso8601 }}
        remote_src: yes
        mode: preserve
        group: mattermost
        owner: mattermost
      when: release.changed

    - name: Delete current Mattermost folder
      file:
        path: /opt/mattermost
        state: absent
      when: release.changed

    - name: Copy latest production-ready release for launch
      copy:
        src: /tmp/mattermost
        dest: /opt
        remote_src: yes
        mode: preserve
        group: mattermost
        owner: mattermost
      when: release.changed

    - name: Start service mattermost
      service:
        name: mattermost
        state: started
      when: release.changed

    - name: Delete unneeded folders
      file:
        path: "/{{ item }}"
        state: absent
      with_items: "{{ directories_to_delete }}"
      when: release.changed